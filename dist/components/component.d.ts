import { AfterContentInit, ElementRef, EventEmitter, Renderer } from '@angular/core';
import { Config, Form, Ion, Item, PickerController } from 'ionic-angular';
import { ControlValueAccessor } from '@angular/forms';
export declare const NUMERIC_VALUE_ACCESSOR: any;
export declare class Numeric extends Ion implements AfterContentInit, ControlValueAccessor {
    private _form;
    private _item;
    private _pickerCtrl;
    _disabled: boolean;
    _labelId: string;
    _text: string;
    private _fn;
    private _isOpen;
    private _min;
    private _max;
    private _value;
    id: string;
    min: string;
    max: string;
    displayFormat: string;
    pickerFormat: string;
    cancelText: string;
    doneText: string;
    pickerOptions: any;
    mode: string;
    ionChange: EventEmitter<any>;
    ionCancel: EventEmitter<any>;
    constructor(_form: Form, config: Config, elementRef: ElementRef, renderer: Renderer, _item: Item, _pickerCtrl: PickerController);
    _click(ev: UIEvent): void;
    _keyup(): void;
    private open();
    private merge(dst, ...args);
    private _baseExtend(dst, objs, deep);
    private generate(picker);
    private validate(picker);
    private divyColumns(picker);
    private setValue(newData);
    private getValue();
    private checkHasValue(inputValue);
    private updateText();
    disabled: any;
    writeValue(val: any): void;
    ngAfterContentInit(): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: any): void;
    private onChange(val);
    private onTouched();
    ngOnDestroy(): void;
    private convertColumnsToNumbers(columns);
}
